[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "radar-webscrapping"
version = "1.0.0"
description = "Sistema de coleta automatizada de dados acadêmicos do SIGAA UFBA"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Radar UFBA Team", email = "radar@ufba.br"}
]
maintainers = [
    {name = "Radar UFBA Team", email = "radar@ufba.br"}
]
keywords = ["webscraping", "education", "sigaa", "ufba", "clean-architecture"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "asyncpg>=0.28.0",
    "aiosqlite>=0.19.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "selenium>=4.11.0",
    "webdriver-manager>=3.9.0",
    "beautifulsoup4>=4.12.0",
    "httpx>=0.24.0",
    "click>=8.1.0",
    "loguru>=0.7.0",
    "python-dotenv>=1.0.0",
    "tenacity>=8.2.0",
    "python-multipart>=0.0.6",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pre-commit>=3.3.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "factory-boy>=3.3.0",
    "faker>=19.3.0",
    "responses>=0.23.0",
    "aioresponses>=0.7.4",
]

[project.urls]
Homepage = "https://github.com/devruso/radar-webscrapping"
Documentation = "https://github.com/devruso/radar-webscrapping/blob/main/README.md"
Repository = "https://github.com/devruso/radar-webscrapping"
"Bug Tracker" = "https://github.com/devruso/radar-webscrapping/issues"
"Changelog" = "https://github.com/devruso/radar-webscrapping/blob/main/CHANGELOG.md"

[project.scripts]
radar-webscrapping = "main:main"

# ===============================================================================
# CONFIGURAÇÃO DO BLACK (CODE FORMATTER)
# ===============================================================================
[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# ===============================================================================
# CONFIGURAÇÃO DO ISORT (IMPORT SORTING)
# ===============================================================================
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]
known_first_party = ["src"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# ===============================================================================
# CONFIGURAÇÃO DO MYPY (TYPE CHECKING)
# ===============================================================================
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Configurações específicas para módulos
[[tool.mypy.overrides]]
module = [
    "selenium.*",
    "webdriver_manager.*",
    "uvicorn.*",
    "loguru.*",
    "tenacity.*",
]
ignore_missing_imports = true

# ===============================================================================
# CONFIGURAÇÃO DO PYTEST
# ===============================================================================
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=70",
    "--durations=10",
    "--maxfail=3",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "selenium: Tests that require Selenium",
    "database: Tests that require database",
    "api: API tests",
    "scraping: Web scraping tests",
    "async: Asynchronous tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning:selenium.*",
    "ignore::DeprecationWarning:urllib3.*",
    "ignore::PendingDeprecationWarning",
]
asyncio_mode = "auto"

# ===============================================================================
# CONFIGURAÇÃO DO COVERAGE
# ===============================================================================
[tool.coverage.run]
source = ["src"]
omit = [
    "src/tests/*",
    "src/*/__init__.py",
    "src/*/migrations/*",
    "venv/*",
    "*/venv/*",
    "*/virtualenv/*",
    ".tox/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# ===============================================================================
# CONFIGURAÇÃO DO BANDIT (SECURITY LINTING)
# ===============================================================================
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert and shell=True warnings in specific contexts

# ===============================================================================
# CONFIGURAÇÃO DO SETUPTOOLS
# ===============================================================================
[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]