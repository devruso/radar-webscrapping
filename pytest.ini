[tool:pytest]
# ===============================================================================
# CONFIGURAÇÃO DO PYTEST - RADAR WEBSCRAPPING
# ===============================================================================

# Diretórios de teste
testpaths = tests

# Padrões de arquivos de teste
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Marcadores personalizados
markers =
    unit: Unit tests
    integration: Integration tests
    e2e: End-to-end tests
    slow: Slow running tests
    selenium: Tests that require Selenium
    database: Tests that require database
    api: API tests
    scraping: Web scraping tests
    async: Asynchronous tests

# Configurações de execução
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=70
    --durations=10
    --maxfail=3

# Filtros de warnings
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning:selenium.*
    ignore::DeprecationWarning:urllib3.*
    ignore::PendingDeprecationWarning

# Configurações assíncronas
asyncio_mode = auto

# Diretórios de saída
junit_family = xunit2
junit_logging = system-out

# Configurações de cobertura no pyproject.toml ou setup.cfg
# (mantenha aqui para compatibilidade)
[coverage:run]
source = src
omit = 
    src/tests/*
    src/*/__init__.py
    src/*/migrations/*
    venv/*
    */venv/*
    */virtualenv/*
    .tox/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml