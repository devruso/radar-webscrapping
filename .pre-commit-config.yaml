# ===============================================================================
# PRE-COMMIT HOOKS CONFIGURATION - RADAR WEBSCRAPPING
# ===============================================================================
# Para instalar: pre-commit install
# Para executar: pre-commit run --all-files

repos:
  # ============================================================================
  # HOOKS B√ÅSICOS
  # ============================================================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: ['--unsafe']
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-docstring-first
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: mixed-line-ending
        args: ['--fix=lf']
      - id: pretty-format-json
        args: ['--autofix', '--no-sort-keys']
      - id: check-added-large-files
        args: ['--maxkb=1000']

  # ============================================================================
  # PYTHON CODE FORMATTING
  # ============================================================================
  - repo: https://github.com/psf/black
    rev: 23.7.0
    hooks:
      - id: black
        language_version: python3.11
        args: [--line-length=100]

  # ============================================================================
  # IMPORT SORTING
  # ============================================================================
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: [--profile=black, --line-length=100]

  # ============================================================================
  # PYTHON LINTING
  # ============================================================================
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=100, --extend-ignore=E203,W503]
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify

  # ============================================================================
  # TYPE CHECKING
  # ============================================================================
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.5.0
    hooks:
      - id: mypy
        args: [--ignore-missing-imports, --no-strict-optional]
        additional_dependencies:
          - types-requests
          - types-setuptools

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, src/, -f, json, -o, bandit-report.json]
        pass_filenames: false

  # ============================================================================
  # DEPENDENCY SCANNING
  # ============================================================================
  - repo: https://github.com/lucas-c/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        files: requirements.*\.txt$

  # ============================================================================
  # DOCKERFILE LINTING
  # ============================================================================
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009]

  # ============================================================================
  # YAML/JSON VALIDATION
  # ============================================================================
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.32.0
    hooks:
      - id: yamllint
        args: [-d, relaxed]

  # ============================================================================
  # SECRETS DETECTION
  # ============================================================================
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: package.lock.json

  # ============================================================================
  # MARKDOWN LINTING
  # ============================================================================
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.35.0
    hooks:
      - id: markdownlint
        args: [--fix]

  # ============================================================================
  # COMMIT MESSAGE VALIDATION
  # ============================================================================
  - repo: https://github.com/commitizen-tools/commitizen
    rev: 3.6.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

  # ============================================================================
  # PYTHON IMPORT CLEANING
  # ============================================================================
  - repo: https://github.com/pycqa/autoflake
    rev: v2.2.0
    hooks:
      - id: autoflake
        args:
          - --in-place
          - --remove-all-unused-imports
          - --remove-unused-variables
          - --remove-duplicate-keys
          - --ignore-init-module-imports

  # ============================================================================
  # PYTHON DOCSTRING FORMATTING
  # ============================================================================
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google]

  # ============================================================================
  # LOCAL HOOKS (EXECUTAM COMANDOS LOCAIS)
  # ============================================================================
  - repo: local
    hooks:
      # Testes r√°pidos
      - id: pytest-unit
        name: Run unit tests
        entry: pytest
        args: [tests/unit/, -v, --tb=short]
        language: system
        pass_filenames: false
        stages: [pre-push]

      # Verifica√ß√£o de build Docker
      - id: docker-build-test
        name: Test Docker build
        entry: docker
        args: [build, -t, radar-webscrapping-test, .]
        language: system
        pass_filenames: false
        stages: [pre-push]

      # Verifica√ß√£o de requirements
      - id: requirements-check
        name: Check requirements.txt is up to date
        entry: bash
        args: [-c, 'pip-compile --dry-run requirements.in > /tmp/req.txt && diff requirements.txt /tmp/req.txt']
        language: system
        files: requirements\.(in|txt)$
        pass_filenames: false

# ============================================================================
# CONFIGURA√á√ÉO GLOBAL
# ============================================================================
default_stages: [pre-commit]
fail_fast: false
minimum_pre_commit_version: '3.0.0'

# Configura√ß√µes espec√≠ficas do reposit√≥rio
exclude: |
  (?x)
  # Arquivos gerados automaticamente
  ^migrations/.*\.py$|
  # Arquivos de cache
  .*\.pyc$|
  # Arquivos de configura√ß√£o espec√≠ficos
  ^\.env.*$|
  # Logs
  ^logs/.*$|
  # Dados
  ^data/.*$

# CI configura√ß√£o
ci:
  autofix_commit_msg: |
    ü§ñ auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '‚¨ÜÔ∏è pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false