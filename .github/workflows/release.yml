name: 🚀 Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===============================================================================
  # VALIDAÇÃO PRÉ-RELEASE
  # ===============================================================================
  pre-release-validation:
    name: ✅ Pre-Release Validation
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Verificar se é pre-release
          if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi
          
          echo "📋 Release version: $VERSION"
          echo "📋 Is pre-release: $([ "$VERSION" =~ -[a-zA-Z] ] && echo "true" || echo "false")"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.0.0 or v1.0.0-alpha"
            exit 1
          fi
          echo "✅ Version format is valid"

      - name: Check if tag exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "❌ Tag $VERSION already exists"
              exit 1
            fi
          else
            if [ "${{ github.event_name }}" = "push" ]; then
              echo "❌ Tag $VERSION should exist for push event"
              exit 1
            fi
          fi

  # ===============================================================================
  # BUILD E TESTES COMPLETOS
  # ===============================================================================
  release-build:
    name: 🏗️ Release Build
    runs-on: ubuntu-latest
    needs: [pre-release-validation]
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for release
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.pre-release-validation.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.pre-release-validation.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.pre-release-validation.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push release image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_VERSION=${{ needs.pre-release-validation.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            BUILD_COMMIT=${{ github.sha }}

  # ===============================================================================
  # TESTES DE RELEASE
  # ===============================================================================
  release-test:
    name: 🧪 Release Tests
    runs-on: ubuntu-latest
    needs: [pre-release-validation, release-build]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: radar_webscrapping_release
          POSTGRES_USER: radar_user
          POSTGRES_PASSWORD: radar_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Test release image
        run: |
          VERSION="${{ needs.pre-release-validation.outputs.version }}"
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION#v}"
          
          echo "🧪 Testing image: $IMAGE"
          
          # Test CLI
          docker run --rm $IMAGE cli --help
          
          # Test health check
          docker run -d --name release-test --network host \
            -e DATABASE_URL=postgresql+asyncpg://radar_user:radar_password@localhost:5432/radar_webscrapping_release \
            -e APP_ENV=testing \
            $IMAGE api
          
          # Wait for startup
          sleep 30
          
          # Test health endpoint
          curl -f http://localhost:8000/health || exit 1
          
          # Cleanup
          docker stop release-test
          docker rm release-test

      - name: Run smoke tests
        run: |
          VERSION="${{ needs.pre-release-validation.outputs.version }}"
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION#v}"
          
          # Test basic functionality
          docker run --rm --network host \
            -e DATABASE_URL=postgresql+asyncpg://radar_user:radar_password@localhost:5432/radar_webscrapping_release \
            -e APP_ENV=testing \
            $IMAGE cli status

  # ===============================================================================
  # CRIAR RELEASE NO GITHUB
  # ===============================================================================
  create-release:
    name: 📝 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [pre-release-validation, release-build, release-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.pre-release-validation.outputs.version }}"
          
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "📋 Generating changelog from $PREVIOUS_TAG to $VERSION"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" ${PREVIOUS_TAG}..HEAD)
          else
            echo "📋 No previous tag found, generating changelog from start"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" HEAD)
          fi
          
          # Save changelog to file
          echo "$CHANGELOG" > changelog.md
          
          echo "previous-tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.pre-release-validation.outputs.version }}
          release_name: "🎯 Radar WebScrapping ${{ needs.pre-release-validation.outputs.version }}"
          body: |
            ## 🎯 Radar WebScrapping ${{ needs.pre-release-validation.outputs.version }}
            
            ### 📦 Docker Images
            
            **Multi-platform support:** `linux/amd64`, `linux/arm64`
            
            ```bash
            # Latest release
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-release-validation.outputs.version }}
            
            # Or use in docker-compose
            services:
              radar-webscrapping:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-release-validation.outputs.version }}
            ```
            
            ### 🔧 Integration with radar-infra
            
            Update your `radar-infra/.env`:
            ```env
            WEBSCRAPPING_VERSION=${{ needs.pre-release-validation.outputs.version }}
            ```
            
            Then redeploy:
            ```bash
            cd radar-infra
            docker-compose pull radar-webscrapping
            docker-compose up -d radar-webscrapping
            ```
            
            ### 📋 What's Changed
            
            $(cat changelog.md)
            
            ### 🛡️ Security
            
            - ✅ All dependencies scanned for vulnerabilities
            - ✅ Docker image security scanned with Trivy
            - ✅ Code security scanned with Bandit
            
            ### 🧪 Testing
            
            - ✅ Unit tests passed
            - ✅ Integration tests passed
            - ✅ Docker image smoke tests passed
            - ✅ CLI functionality verified
            - ✅ API health checks validated
            
            ### 📊 Image Details
            
            - **Base Image**: `python:3.11-slim`
            - **Build Date**: ${{ github.event.head_commit.timestamp }}
            - **Git Commit**: `${{ github.sha }}`
            - **Image Digest**: `${{ needs.release-build.outputs.image-digest }}`
            
            ---
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.changelog.outputs.previous-tag }}...${{ needs.pre-release-validation.outputs.version }}
          draft: false
          prerelease: ${{ needs.pre-release-validation.outputs.is-prerelease == 'true' }}

  # ===============================================================================
  # NOTIFICAR RADAR-INFRA (SE APLICÁVEL)
  # ===============================================================================
  notify-integration:
    name: 🔔 Notify Integration
    runs-on: ubuntu-latest
    needs: [pre-release-validation, create-release]
    if: needs.pre-release-validation.outputs.is-prerelease == 'false'
    
    steps:
      - name: Create integration notification
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ needs.pre-release-validation.outputs.version }}';
            
            // Aqui você pode adicionar lógica para notificar o radar-infra
            // Por exemplo, criar um issue ou PR no repositório radar-infra
            
            console.log(`🎉 Release ${version} created successfully!`);
            console.log(`📦 Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${version}`);
            console.log(`🔄 Update radar-infra with: WEBSCRAPPING_VERSION=${version}`);

  # ===============================================================================
  # CLEANUP PÓS-RELEASE
  # ===============================================================================
  post-release-cleanup:
    name: 🧹 Post-Release Cleanup
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()
    
    steps:
      - name: Clean old pre-releases
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Manter apenas as últimas 5 pre-releases
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const preReleases = releases.filter(r => r.prerelease);
            
            if (preReleases.length > 5) {
              const toDelete = preReleases.slice(5);
              
              for (const release of toDelete) {
                console.log(`Deleting old pre-release: ${release.tag_name}`);
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id,
                });
              }
            }