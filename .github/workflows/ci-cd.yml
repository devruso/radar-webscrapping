name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ['v*']
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===============================================================================
  # JOB 1: LINT E ANÁLISE ESTÁTICA
  # ===============================================================================
  lint:
    name: 🔍 Lint & Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: 🖤 Black (Code formatting)
        run: black --check --diff src/

      - name: 🔢 isort (Import sorting)
        run: isort --check-only --diff src/

      - name: 🐍 Flake8 (Style guide)
        run: flake8 src/ --max-line-length=100 --extend-ignore=E203,W503

      - name: 🏷️ MyPy (Type checking)
        run: mypy src/ --ignore-missing-imports --no-strict-optional

      - name: 🔒 Bandit (Security scan)
        run: bandit -r src/ -f json -o bandit-report.json || true

      - name: 🛡️ Safety (Dependency vulnerabilities)
        run: safety check || true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json

  # ===============================================================================
  # JOB 2: TESTES UNITÁRIOS E INTEGRAÇÃO
  # ===============================================================================
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: radar_webscrapping_test
          POSTGRES_USER: radar_user
          POSTGRES_PASSWORD: radar_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            wget gnupg ca-certificates \
            fonts-liberation libasound2 libatk-bridge2.0-0 \
            libdrm2 libgtk-3-0 libnspr4 libnss3 libx11-6 \
            libxcomposite1 libxdamage1 libxext6 libxfixes3 \
            libxrandr2 libxss1 libxtst6 xdg-utils

      - name: Install Chrome
        run: |
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Install ChromeDriver
        run: |
          CHROME_VERSION=$(google-chrome --version | grep -oE "[0-9]+\.[0-9]+\.[0-9]+")
          CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION%%.*}")
          wget -O /tmp/chromedriver.zip "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
          sudo unzip /tmp/chromedriver.zip -d /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio pytest-mock coverage
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Create test data directories
        run: |
          mkdir -p data logs

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql+asyncpg://radar_user:radar_password@localhost:5432/radar_webscrapping_test
          REDIS_URL: redis://localhost:6379/0
          SELENIUM_HEADLESS: true
          APP_ENV: testing
          LOG_LEVEL: DEBUG
        run: |
          pytest tests/ -v \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=70

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage.xml
            htmlcov/
            pytest-report.xml

  # ===============================================================================
  # JOB 3: BUILD DOCKER IMAGE
  # ===============================================================================
  build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===============================================================================
  # JOB 4: INTEGRATION TESTS (COM DOCKER)
  # ===============================================================================
  integration-test:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: radar_webscrapping_integration
          POSTGRES_USER: radar_user
          POSTGRES_PASSWORD: radar_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run integration tests
        run: |
          docker run --rm \
            --network host \
            -e DATABASE_URL=postgresql+asyncpg://radar_user:radar_password@localhost:5432/radar_webscrapping_integration \
            -e APP_ENV=testing \
            -e SELENIUM_HEADLESS=true \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            python -m pytest tests/integration/ -v

      - name: Test CLI commands
        run: |
          docker run --rm \
            --network host \
            -e DATABASE_URL=postgresql+asyncpg://radar_user:radar_password@localhost:5432/radar_webscrapping_integration \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            cli --help

      - name: Test API startup
        run: |
          # Iniciar container em background
          docker run -d \
            --name test-api \
            --network host \
            -e DATABASE_URL=postgresql+asyncpg://radar_user:radar_password@localhost:5432/radar_webscrapping_integration \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            api &
          
          # Aguardar inicialização
          sleep 30
          
          # Testar health check
          curl -f http://localhost:8000/health || exit 1
          
          # Cleanup
          docker stop test-api
          docker rm test-api

  # ===============================================================================
  # JOB 5: SECURITY SCAN
  # ===============================================================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push'

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ===============================================================================
  # JOB 6: DEPLOY (APENAS PARA TAGS)
  # ===============================================================================
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [build, integration-test, security]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: production

    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "🚀 Deploy para produção seria executado aqui"
          echo "Tag: ${{ github.ref_name }}"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          
          # Aqui você adicionaria os comandos reais de deploy
          # Por exemplo: kubectl, helm, ou integração com radar-infra

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## 🎯 Radar WebScrapping ${{ github.ref_name }}
            
            ### 📦 Docker Image
            ```
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
            
            ### 🔧 Changes
            - Automated release from CI/CD pipeline
            - Full test coverage and security scanning
            
            ### 🐳 Integration with radar-infra
            Update your radar-infra `.env`:
            ```
            WEBSCRAPPING_VERSION=${{ github.ref_name }}
            ```
          draft: false
          prerelease: false

  # ===============================================================================
  # JOB 7: CLEANUP
  # ===============================================================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Delete old packages
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ github.event.repository.name }}
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true